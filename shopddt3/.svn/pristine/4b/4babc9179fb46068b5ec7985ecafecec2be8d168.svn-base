<?php
namespace Home\Controller;
use BizService\ShopService;
use BizService\UserService;
use BizService\ExtendService;
use BizService\OrderService;

header("Content-type:text/html;charset=utf-8");

class ExtendController extends BaseController
{
    private $shop_id;
    public function _initialize(){
        parent::_initialize();
        $shop = get_shop_proxy();
        $this->shop_id = $shop['shop_id'];
    }
    public function myChannel()
    {   
        $extend = new ExtendService();
        $Order = new OrderService();
        $ExtendChannel = D('Admin/ExtendChannel');
        $userId = session('userId');
        $countData = array('extendusercount'=>0,'orderscount'=>0,'dealcount'=>0,'goodscount'=>0);
        $channelId = $ExtendChannel->findChannelIdByUserId($userId);
        $channelInfo = $ExtendChannel->findInfoByChannelId($channelId);
        if($channelId){
            $memberList = $extend->memberList($channelId);
            $countData['membercount'] = sizeof($memberList);
            foreach ($memberList as $key => $value) {
                foreach($value['user_list'] as $key1 => $value1){
                    //得到推广生成会员的user_id
                    $condition['user_id'] = $value1['user_id'];

                    //输入今日时间戳，获取今日会员订单情况
                    $condition['start_time'] = strtotime(date('Y-m-d',strtotime('+0 day')));

                    $order_List[$key][$key1]=$Order->user_order_count($condition);
                    $memberList[$key]['orderscount']+=$order_List[$key][$key1]['order_num'];
                    $memberList[$key]['dealcount']+=$order_List[$key][$key1]['order_money'];
                    $memberList[$key]['goodscount']+=$order_List[$key][$key1]['order_goods_total'];
                    // var_dump($value1['reg_time']>strtotime(date('Y-m-d',strtotime('+0 day')))); 

                    //筛选今日注册人员
                    if($value1['reg_time']>strtotime(date('Y-m-d',strtotime('+0 day')))){
                        $countData['extendusercount']+=1;
                    }
                    
                }

                $countData['orderscount']+=$memberList[$key]['orderscount'];
                $countData['dealcount']+=$memberList[$key]['dealcount'];
                $countData['goodscount']+=$memberList[$key]['goodscount'];
            }
            // var_dump($countData);exit;
            $this->assign('countdata', $countData);
        }

        $this->assign('channelinfo', $channelInfo);
        
        $this->display();
    }

    public function myExtend()
    {
        $Extend = new ExtendService();
        $userId = session('userId');
        $this->display();
    }
    public function personList()
    {
        $extend = new ExtendService();
        $Order = new OrderService();
        $ExtendChannel = D('Admin/ExtendChannel');
        $userId = session('userId');
        $countData = array();
        $channelId = $ExtendChannel->findChannelIdByUserId($userId);
        $channelInfo = $ExtendChannel->findInfoByChannelId($channelId);
        if($channelId){
            $memberList = $extend->memberList($channelId);
            $countData['membercount'] = sizeof($memberList);
            foreach ($memberList as $key => $value) {
                foreach($value['user_list'] as $key1 => $value1){
                    if(1){
                        $condition['user_id'] = $value1['user_id'];
                        $order_List[$key][$key1]=$Order->user_order_count($condition);
                        $memberList[$key]['orderscount']+=$order_List[$key][$key1]['order_num'];
                        $memberList[$key]['dealcount']+=$order_List[$key][$key1]['order_money'];
                        $memberList[$key]['goodscount']+=$order_List[$key][$key1]['order_goods_total'];
                    }
                }
                // var_dump($value['user_list']);
            }
            // var_dump($memberList);exit;
            $this->assign('member_list', $memberList);
            $this->assign('countdata', $countData);
        }

        $this->display();
    }







    public function changeNickname()
    {
        $user = new UserService();
        $userId = session('userId');
        $queryData = array('nick_name');
        $userData = $user->userInfo($userId, $queryData);
        $this->assign('userdata', $userData);
        $this->display();
    }

    /**
     * 关于我们
     */
    public function about(){
        $shop = new ShopService();
        $shop_info = $shop->get_shop_info($this->shop_id);
        $this->assign("info",$shop_info[0]);
        $this->display();
    }
    public function changePassword()
    {
        $this->display();
    }

    public function actChangeNickname()
    {
        $user = new UserService();
        $userId = session('userId');
        $nickName = I('get.nickname', '', 'strval');
        $data = $user->changeUserData($userId, 'nick_name', $nickName);
        redirect('mine');
    }

    public function actChangePassword()
    {
        $user = new UserService();
        $oldPassword = I('post.old_password', '', 'strval');
        $newPassword = I('post.new_password', '', 'strval');
        if ($user->checkUser(session('userName'), $oldPassword) > 0) {
            $data = $user->resetPasswd(session('userId'), $newPassword);
            if ($data) {
                echo "<script type='text/javascript'>alert('修改密码成功');window.location.href='" . U('user/mine') . "';</script>";
            } else {
                echo "<script type='text/javascript'>alert('修改密码失败');history.back();</script>";
            }
        } else {
            echo "<script type='text/javascript'>alert('原密码输入错误');history.back();</script>";
        }

    }

    public function location()
    {
        $this->display('location');
    }

}