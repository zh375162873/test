<?php
/*
 * 普通商品订单支付和管理模块
 */
namespace Home\Controller;

use BizService\OrderService;
use Think\Crypt\Driver\Think;
use BizService\UserService;
use BizService\GoodsstoreService;
use BizService\ExtendService;

class OrderController extends BaseController
{
    public $orderdb, $goods_model, $users, $orderservice, $_userid, $refunddb, $refundreason, $pinglundb, $dhm_db,$extendservice;

    public function _initialize(){
        parent::_initialize();
        //初始化模型
        $this->orderdb = D("Orders");
        $this->refunddb = D("RefundReturn");
        $this->refundreason = D("RefundReason");
        $this->pinglundb = D("PinglunManage");
        $this->dhm_db = D("DhmManage");
        $this->goods_model = new GoodsstoreService();
        $this->users = new UserService();
        $this->orderservice = new OrderService();
        $this->extendservice = new ExtendService();

       // echo "<pre>";print_r($_SESSION);exit();
        //判断用户是否登录
       if (!session("userId")) {
            $this->error("用户没有登录，请先登录!");
        } else {
            $this->_userid = session("userId");
        }

        $this->assign("userid", $this->_userid); 
    }

    public function index()
    {
       $user = 4;
       $arr['count']=$this->orderservice->user_order_count($user,79);
       $arr['list']=$this->orderservice->user_order_list($user,79);
       
       echo "<pre>";print_r($arr);exit(); 
        
       echo '我是Home模块';
    }

    //生成订单，需要做一个跳转，防止刷新页面生成多余订单
    //仅仅生成订单
    public function create()
    {
        //判断请求类型
        if (IS_POST) {
            //初始化参数
            $goods_id = I("post.goods_id", 7);
            $num = I("post.number", 2);
            $goods_code = I("post.goods_code",0);

            if (empty($goods_id) && empty($num)) {
                $this->error('参数不全');
            }
            //获取商品数据
            $goods = $this->goods_model->getinfo($goods_id, array("goods_id", "goods_name", "shop_id", "store_id", "store_name", "goods_plun", "goods_price", "goods_promotion_price", "goods_marketprice", "goods_storage", "goods_image"), 1);

            //判断购买数量库存是否足够
            if ($num > $goods['goods_storage']) {
                $this->error('商品库存不足');
            } else {
                $goods['goods_num'] = $num;
            }
            
           //判断优惠码，处理优惠信息 
            if($goods_code){
                $extend = $this->extendservice->checkExtendGoods($goods_id);
                if($extend>0){
                    $extend_info = $this->extendservice->getExtendGoods($goods_id,$goods_code);
                    //判断优惠码有效期
                    if(time()>$extend_info['begin_time']||time()<$extend_info['end_time']){
                        //判断优惠码数量
                        if($num > $extend_info['quantity']){
                            $extend_num = $extend_info['quantity'];
                        }else{
                            $extend_num = $num;
                        }
                    }else{
                        $this->error("此优惠码已经过期了");
                    }
                }else{
                    $this->error("此优惠码已经没有了");
                }
            }
            
            
            //模拟
            $goods_arr['goods_id'] = $goods['goods_id'];
            $goods_arr['goods_name'] = $goods['goods_name'];
            $goods_arr['shop_id'] = $goods['shop_id'];
            $goods_arr['store_id'] = $goods['store_id'];
            $goods_arr['store_name'] = $goods['store_name'];
            $goods_arr['market_price'] = $goods['goods_marketprice'];
            $goods_arr['goods_price'] = $goods['goods_price'];
            $goods_arr['goods_plun'] = $goods['goods_plun'];
            $goods_arr['goods_image'] = $goods['goods_image'];
            $goods_arr['goods_num'] = $num;
            /*
             * 计算订单金额，由于订单没有其他额外金额支付（物流），所以商品总额和订单总额一样
             * 首先得判断商户余额状况，如果足够就直接余额支付，如果不足够就计算看需要计算线支付金额和余额支付金额。
             */
            $money_info = array();
            $money_info['goods_amount'] = $goods_arr['goods_price'] * $num;
            //优惠信息处理
            if($extend_info){
                $extend_money = round($goods_arr['goods_price']*$extend_num*(1-($extend_info['discount']/100)),2);
                $money_info['extend_id'] = $extend_info['channel_user'];
                $money_info['extend_discount'] = $extend_info['discount'];
                $money_info['extend_num'] = $extend_num;
                $money_info['order_youhui'] = $extend_money;
            }
            $money_info['order_amount'] = $goods_arr['goods_price'] * $num-$extend_money;
           
            //获取用户余额账户情况，计算
            $userinfo = $this->users->userInfo($this->_userid);

            $ye_money = $userinfo['user_money'];
            if ($money_info['order_amount'] > $ye_money) {
                $money_info['ye_paymoney'] = $ye_money;
                $money_info['online_paymoney'] = $money_info['order_amount'] - $ye_money;
            }else{
                $money_info['ye_paymoney'] = $money_info['order_amount'];
                $money_info['online_paymoney'] = 0;
            }
           

            //提交订单
            $orderid = $this->orderdb->createorder($goods_arr, $money_info);

            if ($orderid) {
                $this->redirect('order/createpay', array('id' => $orderid));
            } else {
                $this->error('订单生成失败！');
            }
        } else {
            $this->error('非法请求');
        }
    }

    //订单详情页和支付页面
    public function createpay()
    {
        //获取订单信息
        $order_id = I("get.id", 0);
        $orderinfo = $this->orderdb->getinfo($order_id);
        $userinfo = $this->users->userInfo($this->_userid);
        $params['order_sn'] = $orderinfo['order_sn'];
        //处理需要支付的数据
        // echo "<pre>";print_r($orderinfo);exit();
        if (strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger')) {
            $http_agent = 1;
            $this->assign("http_agent", $http_agent);
        }

        $this->assign("userinfo", $userinfo);
        //判断支付的方式，如果金额足够就直接余额支付，不用调用第三方接口了
        if ($orderinfo['online_paymoney'] == 0) {
            $this->assign("orderinfo", $orderinfo);
            $this->display("pay");
        } else {
            //生成支付按钮和相关订单信息
            if ($http_agent == 1) {
                $http_host = $_SERVER['HTTP_HOST'];
                $pay['wxpay'] = $this->orderservice->http("http://".$http_host."/index.php/Home/Wxpay/js_api_call.html", $params);//微信
                //$pay['wxpay']=$this->orderservice->wxpay($orderinfo);
            }else{
                $pay['alipay'] = $this->orderservice->online_pay($orderinfo);//支付宝
            }
            
            //获取模板
            $this->assign("pay", $pay);
            $this->assign("orderinfo", $orderinfo);
            $this->display("pay");
        }
    }

    //余额支付
    public function yezhifu()
    {
        //获取订单信息
        $order_id = I("post.order_id", 0);
        $orderinfo = $this->orderdb->getinfo($order_id);
        if (empty($order_id)) {
            $this->error("参数不足");
        }
        if (empty($orderinfo)) {
            $this->error("该订单不存在");
        }
        if ($orderinfo['order_status'] != 0) {
            $this->error("订单已经过期");
        }


        if ($this->orderdb->yezhifu_chuli($order_id)) {
            $this->success("支付成功",U("order/orderlist"));
        } else {
            $this->error("操作失败",U("index/index"));
        }

    }


    /*
     *************用户中心订单管理********************* 
     */
    //我的订单
    public function orderlist()
    {
        //订单列表
        //$userid= $this->userdb->getid();//获取用户id
        $userid = $this->_userid;

        $page = I("post.curPage", 1);
        //$rule为筛选规则 1-支付未消费，2-已消费，3-退款单；
        if($_GET['rule']){
            $rule = I("get.rule",0);
        }else{
            $rule = I("post.rule",0);
        }
        
        $pagenum = I("post.pageNum",10);

        $arr=$this->orderdb->list_order($userid,$page,$pagenum,$rule);
        
        $this->assign("rule",$rule);
        $this->assign("arr",$arr['arr']);
        $this->assign("info",$arr['info']);
        $this->display("order_list");
    } 
    
    public function ajax_orderlist(){
        $userid = $this->_userid;
        $pagenum = I("post.pageNum");
        $curPage = I("post.curPage");
        $rule = I("post.rule");
        
        $list = $this->orderdb->list_order($userid,$curPage,$pagenum,$rule);
        echo "<pre>";print_r($list);exit();
        if(empty($list)){
            $type==3;
        }else{
            for($i=0;$i<count($list);$i++){
                //判断订单支付状态
                $string = "";
                if($list[$i]['order_status']==2){
                    $string .="<div class='colorFf'>已消费";
                    if($list[$i]['evaluation_state']==0){
                        $string .="<a href=".U('order/pinglun',array('id'=>$vo['order_id']))." class='pingJia'>评价</a></div>";
                    }else{
                        $list[$i]['evaluation_state_code']="<a href='#' class='pingJia'>已评价</a></div>";
                    }
                }else{
                    for($i=0;$i<count($vo['dhm']);$i++){
                        if($vo['dhm'][$i]['status']==0&&$vo['dhm'][$i]['refund_status']==0){
                            $string .= "<div class='colorC4'>未消费";
                        }
                        elseif($vo['dhm'][$i]['status']==0&&$vo['dhm'][$i]['refund_status']==1){
                            $string .= "<div class='colorFf'>正在退款中";
                        }
                        elseif($vo['dhm'][$i]['status']==0&&$vo['dhm'][$i]['refund_status']==2){
                            $string .= "<div class='colorFf'>退款完成";
                        }
                        elseif($vo['dhm'][$i]['status']==0&&$vo['dhm'][$i]['refund_status']==3){
                            $string .= "<div class='colorFf'>退款驳回";
                        }
                        $string .= "<span class='dhm format_code'>".$vo['dhm'][$i]['dhm_code']."</span></div>";
                    }
                }
                $list[$i]['string'] = $string;
            }
            if(count($list)==$pagenum){
                $type=1;
            }else{
                $type=2;
            }
        }
       
        $data['list'] = $list;
        $data['type'] = $type;
       
        $this->ajaxReturn($data);
    }
    
    //订单详情
    public function orderinfo()
    {
        //初始化数据
        $order_id = I("get.id", 0);
        if (!$order_id) {
            $this->error("缺少参数");
        }

        //订单详情
        $orderinfo = $this->orderdb->getinfo($order_id);
        $orderinfo['payment_time'] = date("Y-m-d H:i:s", $orderinfo['payment_time']);
        $this->assign("orderinfo", $orderinfo);
        $this->assign("dhm", $orderinfo['dhm']);
        $this->display("order");
    }


    /**
     * 评论模块
     */
    public function pinglun()
    {
        $order_id = I("get.id", 0);
        if (!$order_id) {
            $this->error("缺少参数");
        }
        $orderinfo = $this->orderdb->getinfo($order_id);
        $this->assign("orderinfo", $orderinfo);
        $this->assign("orderid", $order_id);
        $this->assign("goodstype", 0);
        $this->display("pinglun");
    }

    public function add_pl()
    {
        $order_id = I("post.orderid");
        $goodstype = I("post.goodstype");
        $parentid = I("get.parentid", 0);
        $desc = I("post.desc");
        $mc_score = I("post.score");

        $pl_info = array(
            "order_id" => $order_id,
            "goodstype" => $goodstype,
            "desc" => $desc,
            "mc_score" => $mc_score,
            "parentid" => $parentid,
        );

        if ($this->pinglundb->addplun($pl_info)) {
            $this->success("评论提交成功！");
        } else {
            $this->error("评论提交失败！");
        }
    }


    /**
     * 退款流程开发
     */
    public function refund_order()
    {
        //初始化参数 order_id
        $order_id = I("get.id", 0);
        $dhm_id = I("dhm_id", 0);
        if (!$order_id) {
            $this->error("缺少参数");
        }

        //获取订单详情
        $orderinfo = $this->orderdb->getinfo($order_id);
        $refundinfo = $this->refundreason->order("sort ASC")->select();

        $this->assign("refundinfo", $refundinfo);
        $this->assign("orderinfo", $orderinfo);
        $this->assign("dhm_id", $dhm_id);
        $this->display("refund_order");
    }

    /**
     * 提交退款申请
     */
    public function refund_tijiao()
    {
        //初始化参数
        $order_id = I("get.id", 0);
        if (!$order_id) {
            $this->error("缺少参数");
        }
        $reason = I("post.reason");
        $dhm_id = I("post.dhm_id", 0);
        $reasonstring = "";

        for ($i = 0; $i < count($reason); $i++) {
            if ($i == count($reason) - 1) {
                $reasonstring .= $reason[$i];
            } else {
                $reasonstring .= $reason[$i] . "、";
            }
        }
        $othereason = I("post.othereason", 0);
        $reasontext = I("post.reasontext");
        if ($othereason) {
            $reasonstring .= "、" . $reasontext;
        }
        $method = I("post.method");
        $reason_tj = array();
        $reason_tj['info'] = $reasonstring;
        $reason_tj['dhm_id'] = $dhm_id;
        $reason_tj['method'] = $method;

        //支付宝
        if ($method == 2) {
            $reason_tj['zh'] = I("post.zfbNum");
            $reason_tj['telephone'] = I("post.zfbtel");
        } elseif ($method == 3) {
            $reason_tj['zh'] = I("post.wxNum");
            $reason_tj['telephone'] = I("post.wxtel");
        }

        if ($this->refunddb->sh_reason($order_id, $reason_tj)) {
            $this->success("提交申请成功", U("Home/order/orderlist"));
        } else {
            $this->error("提交退款申请失败", U("Home/order/orderlist"));
        }

    }


}

